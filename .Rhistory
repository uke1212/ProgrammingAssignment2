makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
pippo <- matrix[c(2,3,4,5,6),row=2,col=3]
pippo <- matrix[c(2,3,4,5,6),2,3]
pippo <- matrix(c(2,3,4,5,6),3,3)
View(pippo)
makeCacheMatrix(pippo)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list (set = set, get = get, setinv = setinv , getinv = getinv)
}
makeCacheMatrix(pippo)
View(makeCacheMatrix)
pippo1 <- makeCacheMatrix(pippo)
View(pippo1)
clss(pippo1)
class(pippo1)
pippo1 <- as.matrix(makeCacheMatrix(pippo))
View(pippo1)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
pippo <- matrix(c(2,3,4,5,6),3,2)
pippo <- matrix(c(2,3,4,5,6,7,8,9,10),3,3)
pippo
pippo1 <- makeCacheMatrix(pippo)
cacheSolve(pippo1)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- inverse(data, ...)
x$setinv(inv)
inv
}
cacheSolve(pippo1)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- inv(data, ...)
x$setinv(inv)
inv
}
cacheSolve(pippo1)
